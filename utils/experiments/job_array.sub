#!/bin/bash
#SBATCH -n 1                          # Total number of cores (tasks) requested (1 by default)
#SBATCH --get-user-env                # retrieve the users login environment
#SBATCH --requeue                     # requeue the job if it fails
#SBATCH --exclude=jjs533-compute-01   # Exclude this node from the job because it got cuda problems with the H100

# Number of times to requeue the job if it fails
MAX_RETRIES=3

# Store Job ID, Array Job ID, and Array Task ID in a string variable
# Version 1: j%j-A%A_a%a
# Version 2: j${SLURM_JOB_ID}-A${SLURM_ARRAY_JOB_ID}_a${SLURM_ARRAY_TASK_ID}
JOB_DESC="j${SLURM_JOB_ID}-A${SLURM_ARRAY_JOB_ID}_a${SLURM_ARRAY_TASK_ID}"

# Obtain these variables from the command line
commands_file=$1
sweep_dir=$2
mail=$3

echo "commands_file: $commands_file"
echo "sweep_dir: $sweep_dir"
echo "mail: $mail"

send_email_notification() {
    local subject="$1"
    local message="$2"
    if [ -n "$mail" ]; then
        # Use the mail command to send an email
        echo "$message" | mail -s "$subject" "$mail"
    fi
}

# Define these varaibles
command=$(sed -n "${SLURM_ARRAY_TASK_ID}p" $commands_file)
attempt_file="${sweep_dir}/attempt-$JOB_DESC.txt"
fails_dir="${sweep_dir}/failed"

# Load the conda environment
eval "$(/share/apps/anaconda3/2022.10/bin/conda shell.bash hook)"
conda activate alon2

# Attempt number of this job
if [ -f "$attempt_file" ]; then
    attempt=$(cat "$attempt_file")
else
    attempt=1
fi

echo "Executing command: $command"
echo "Attempt: $attempt"
echo ""

# This function can optionally be called when the job fails
requeue_job_and_exit () {
    # Create email content
    local email_subject="Job ${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID} failed"
    local email_message=""

    if [ "$attempt" -le "$MAX_RETRIES" ]; then
        email_message="Job $JOB_DESC failed on attempt $attempt. Requeuing attempt $((attempt + 1)) of $MAX_RETRIES."
        echo "Requeuing..."
        echo "$((attempt + 1))" > "$attempt_file"
        scontrol requeue "$SLURM_JOB_ID"
    else
        email_message="Job $JOB_DESC failed after $MAX_RETRIES attempts. Giving up."
        echo "Max requeue attempts (${MAX_RETRIES}) reached, giving up."
        rm -f "$attempt_file"
    fi

    if [ -n "$out" ] || [  -n "$err" ]; then
        email_message="${email_message}
Please check ${fail_name}.err and ${fail_name}.log for details:

out:
$out

err:
$err"
    fi

    send_email_notification "$email_subject" "$email_message"
    exit 1
}

# Debugging CUDA availability
# store the output of nvidia-smi, or the empty string if there is no gpu
# ("2> /dev/null" makes the stderr not outputted)
nvidia_smi_output=$(nvidia-smi 2> /dev/null)
# -n tells whether a variable is nonempty (-z is the opposite, tells whether it's empty)
if [ -n "$nvidia_smi_output" ]; then
    message="Host: $(hostname)
Partition: $SLURM_JOB_PARTITION
GPU devices (CUDA_VISIBLE_DEVICES): $CUDA_VISIBLE_DEVICES
nvidia-smi output:
$nvidia_smi_output"
    unavail=$(python -c "import torch;print('' if torch.cuda.is_available() else 'CUDA is not available!')")
    if [ -n "$unavail" ]; then
        echo "$unavail"
        python -c "import torch; print(f'Torch CUDA version: {torch.version.cuda}')"
        err="$unavail"
        out="$message
$unavail"
        echo "$out"
        echo "$err" >&2
        
        mkdir -p "$fails_dir"
        fail_name="${fails_dir}/${JOB_DESC}-attempt${attempt}-exit1"
        echo "$err" > "${fail_name}.err"
        echo "$out" > "${fail_name}.out"
        requeue_job_and_exit
    else
        echo "$message"
    fi
fi

# Run the command, capturing stdout, stderr, and exit code
out_file=$(mktemp)
err_file=$(mktemp)
bash -c "$command" > "$out_file" 2> "$err_file"
exit_code=$?
out=$(<"$out_file")
err=$(<"$err_file")
rm "$out_file" "$err_file"

# Print stdout back to stdout and stderr back to stderr
echo "$out"
echo "$err" >&2

fail_name="${fails_dir}/${JOB_DESC}-attempt${attempt}-exit${exit_code}"

# Check if the command was successful
if [ "$exit_code" -eq 0 ]; then
    echo "Command succeeded"
else
    echo "" >&2
    echo "[Command failed with exit code $exit_code.]" >&2
    
    mkdir -p "$fails_dir"
    echo "$err" > "${fail_name}.err"
    echo "$out" > "${fail_name}.out"

    email_subject="Job ${SLURM_ARRAY_JOB_ID}_${SLURM_ARRAY_TASK_ID} failed with exit code $exit_code"
    email_message="Job $JOB_DESC failed with exit code $exit_code."
    
    if [ -n "$out" ] || [  -n "$err" ]; then
        email_message="${email_message}
Please check ${fail_name}.err and ${fail_name}.log for details:

out:
$out

err:
$err"
    fi

    if [ "$exit_code" -eq 1 ]; then
        echo "Command failed with exit code 1. This is likely a user error. Not requeuing."
        echo "Please check ${fail_name}.err and ${fail_name}.out for details."

        send_email_notification "$email_subject - CANCELING JOB ARRAY" "$email_message Canceling job array."

        echo "Canceling the job array ${SLURM_ARRAY_JOB_ID}_*."
        scancel "${SLURM_ARRAY_JOB_ID}"
    else
        echo "Command failed with exit code $exit_code. Attempting to requeue the job."
        requeue_job_and_exit
    fi
fi

rm -f "$attempt_file"
exit $exit_code
